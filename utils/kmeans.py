################################################################################
## IMPORTS #####################################################################
################################################################################


import data
import matplotlib.pyplot as plt
import numpy as np
import random

from numpy import asarray as arr
from numpy import asmatrix as mat
from numpy import atleast_2d as twod


################################################################################
################################################################################
################################################################################


################################################################################
## KMEANS CLUSTERING ###########################################################
################################################################################


class KMeans:

	def __init__(self, X, K, init='random', max_iter=100, do_plot=False):
		n,d = twod(X).shape							# get data size

		init = init.lower()
		if init == 'random':
			pi = np.random.permutation(n)
			c = X[pi[0:K],:]
		elif init == 'farthest':
			c = self.k_init(X, K, True)


## HELPERS #####################################################################

	def k_init(self, X, K, determ):
		m,n = twod(X).shape
		clusters = np.zeros((K,n))
		clusters[0,:] = X[np.floor(np.random.rand() * m),:]		# take random point as first cluster
		dist = np.sum(np.power((X - np.ones((m,1)) * clusters[0,:]), 2), axis=1)

		print('dist')
		print(dist)


################################################################################
################################################################################
################################################################################


################################################################################
## MAIN ########################################################################
################################################################################


if __name__ == '__main__':

	X,Y = data.load_data_from_csv('../classifier-data.csv', 4, float)
	X,Y = arr(X), arr(Y)

	kmeans = KMeans(X, 5, 'farthest')


################################################################################
################################################################################
################################################################################
